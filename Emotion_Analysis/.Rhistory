}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
levels(PT$Pairwise$ComparisonA)
PVAL=acast(PT$Pairwise[,c(1,2,4)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
#Tes for subsetLoss
source("../../../Doctorado/Programas/LibRCode/pairwiseMcNemarCramer.R")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PVAL=acast(PT$Pairwise[,c(1,2,4)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
#Tes for subsetLoss
source("../../../Doctorado/Programas/LibRCode/pairwiseMcNemarCramer.R")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PVAL=acast(PT$Pairwise[,c(1,2,4)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
View(dataCorrectPredictionsLong)
#Tes for subsetLoss
source("../../../Doctorado/Programas/LibRCode/pairwiseMcNemarCramer.R")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong$Var2 <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PVAL=acast(PT$Pairwise[,c(1,2,4)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
#Tes for subsetLoss
source("../../../Doctorado/Programas/LibRCode/pairwiseMcNemarCramer.R")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong$Var2 <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PVAL=acast(PT$Pairwise[,c(1,2,4)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
#Tes for subsetLoss
source("../../../Doctorado/Programas/LibRCode/pairwiseMcNemarCramer.R")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong$Var2 <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
#Tes for subsetLoss
source("../../../Doctorado/Programas/LibRCode/pairwiseMcNemarCramer.R")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong$Var2 <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PVAL=acast(PT$Pairwise[,c(1,2,4)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
xtable(PVAL,digits=-3)
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
xtable(PVAL,digits=-3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust > 0.05] <- ""
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
View(PVAL)
xtable(PVAL,digits=-3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust > 0.05] <- "-"
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
xtable(PVAL,digits=-3)
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust > 0.05] <- "-"
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
xtable(PVAL,digits=-3)
#datasets <- c("OrtuNN", "SONN")
#datasets <- c("OrtuNN")
datasets <- c("SOEmotionsNN")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong$Var2 <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust > 0.05] <- "-"
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
xtable(PVAL,digits=-3)
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 && is.numeric(PT$Pairwise$p.adjust)]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 && PT$Pairwise$p.adjust!="***"]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 && PT$Pairwise$p.adjust=="***"]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & PT$Pairwise$p.adjust=="***"]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & is.numeric(PT$Pairwise$p.adjust)]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 && is.numeric(PT$Pairwise$p.adjust)] <- "**"
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 && is.numeric(PT$Pairwise$p.adjust)]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & PT$Pairwise$p.adjust!="***"]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & PT$Pairwise$p.adjust!="***"] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***"] | PT$Pairwise$p.adjust!="**"])])
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" | PT$Pairwise$p.adjust!="**"])]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" | PT$Pairwise$p.adjust!="**")]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" | PT$Pairwise$p.adjust!="**")] <- "*"
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & PT$Pairwise$p.adjust!="***"] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" & PT$Pairwise$p.adjust!="**")]
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" & PT$Pairwise$p.adjust!="**")] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust >= 0.05] <- "-"
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
xtable(PVAL,digits=-3)
View(PVAL)
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & PT$Pairwise$p.adjust!="***"] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" & PT$Pairwise$p.adjust!="**")] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust >= 0.05] <- "-"
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")\t")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
xtable(PVAL,digits=-3)
#datasets <- c("OrtuNN", "SONN")
datasets <- c("OrtuNN")
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
output <- replace(output, output!=labelsNumber, 0)
output <- replace(output, output==labelsNumber, 1)
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions <- dataCorrectPredictions[,c(6,5,10,9,14,13,18,17,4,3,8,7,12,11,16,15,1,2)] #Just to match the order of tables in a
dataCorrectPredictionsLong <- melt(as.matrix(dataCorrectPredictions))
dataCorrectPredictionsLong$Var2 <- factor(dataCorrectPredictionsLong$Var2, ordered = TRUE)
cochrans <- cochran.qtest(value ~ Var2 | Var1, data = dataCorrectPredictionsLong)
if(cochrans$p.value < 0.05)
{
print(paste0("P-value:",cochrans$p.value))
PT = pairwiseMcnemarCramer(value ~ Var2 | Var1, data   = dataCorrectPredictionsLong, test   = "mcnemar", method = "fdr", digits = 3)
print(PT)
}
else
{
print(paste0("P-value:",cochrans$p.value))
}
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.001] <- "***"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.01 & PT$Pairwise$p.adjust!="***"] <- "**"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust < 0.05 & (PT$Pairwise$p.adjust!="***" & PT$Pairwise$p.adjust!="**")] <- "*"
PT$Pairwise$p.adjust[PT$Pairwise$p.adjust >= 0.05] <- "-"
PT$Pairwise$PVEF <- paste0(PT$Pairwise$p.adjust, " (",PT$Pairwise$v, ")\t")
PVAL=acast(PT$Pairwise[,c(1,2,6)],PT$Pairwise$ComparisonA~PT$Pairwise$ComparisonB)
xtable(PVAL,digits=-3)
library(reshape2)
directoryPred <- "D:/Sentiment_Analysis/Emotion_Adrian/PredictionsNN/"
directoryEval <- "D:/Sentiment_Analysis/Emotion_Adrian/EvaluationNN/"
#datasets <- c("OrtuNN", "SONN")
datasets <- c("OrtuNN")
#datasets <- c("SOEmotionsNN")
labelsNumber <- 6
#Finding the mins and max for examples
library(Rfast)
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
rowMinsMaxs(as.matrix(dataCorrectPredictions))
View(dataCorrectPredictions)
dataCorrectPredictions[,3]
dataCorrectPredictions[3,]
dataCorrectPredictions[2,]
dataCorrectPredictions[24,]
dataCorrectPredictions[25,]
dataCorrectPredictions[26,]
dataCorrectPredictions[49,]
dataCorrectPredictions[71,]
dataCorrectPredictions[90,]
dataCorrectPredictions[276,]
dataCorrectPredictions[293,]
dataCorrectPredictions[295,]
dataCorrectPredictions[311,]
dataCorrectPredictions[74,]
dataCorrectPredictions[402,]
dataCorrectPredictions[400,]
dataCorrectPredictions[396,]
library(reshape2)
directoryPred <- "D:/Sentiment_Analysis/Emotion_Adrian/PredictionsNN/"
directoryEval <- "D:/Sentiment_Analysis/Emotion_Adrian/EvaluationNN/"
#datasets <- c("OrtuNN", "SONN")
#datasets <- c("OrtuNN")
datasets <- c("SOEmotionsNN")
labelsNumber <- 6
library(reshape2)
directoryPred <- "D:/Sentiment_Analysis/Emotion_Adrian/PredictionsNN/"
directoryEval <- "D:/Sentiment_Analysis/Emotion_Adrian/EvaluationNN/"
#datasets <- c("OrtuNN", "SONN")
#datasets <- c("OrtuNN")
datasets <- c("SOEmotionsNN")
labelsNumber <- 6
library(Rfast)
for(dataset in datasets)
{
dataCorrectPredictions <- NULL
filesMethods <-  list.files(path = directoryPred, pattern = paste0("^",dataset,"-"))
solution <- read.csv2(paste0(directoryPred,"solution_",dataset,".lacd"), sep ="\t", dec = ".", header = FALSE)
for(fileMethod in filesMethods)
{
data <- read.csv2(paste0(directoryPred,fileMethod), sep ="\t", dec = ".", header = FALSE)
output <- rowSums(!xor(data, solution))
if(is.null(dataCorrectPredictions))
{
dataCorrectPredictions <- as.data.frame(output)
} else
{
dataCorrectPredictions <- cbind(dataCorrectPredictions,output)
}
names(dataCorrectPredictions)[names(dataCorrectPredictions) == "output"] <- substr(fileMethod, 0,nchar(fileMethod)-5)
}
dataCorrectPredictions[572,]
dataCorrectPredictions[502,]
dataCorrectPredictions[504,]
dataCorrectPredictions[503,]
